# -*- coding: utf-8 -*-
"""salary_prediction_(Abu_Sufyan).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XMKUpqcI87lF3oFublQRN9J5fWp4w1tG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset = pd.read_csv("Salary_Data.csv")

dataset.head()
dataset.size

# plotting dataset x and y variables

plt.scatter(dataset["YearsExperience"],dataset["Salary"])


# labels of x and y

plt.xlabel("YearsExperience")
plt.ylabel("Salary")
plt.show()

# slicing the data

X = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

# print the value of x

print(X)

# print the value of y

print(y)

# using sklearn library

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=1/3,random_state=101)

X_train.size

X_test.size

y_train.size

y_test.size

from sklearn.linear_model import LinearRegression
LR=LinearRegression()

LR.fit(X_train, y_train)

y_pred_LR = LR.predict(X_test)

X_test

y_test

y_pred_LR

diff_LR = y_test-y_pred_LR

axis_df = pd.concat([pd.Series(y_pred_LR), pd.Series(y_test), pd.Series(diff_LR)], axis = 1)
axis_df.columns=['Predictions', 'Actual_value', 'Difference']

axis_df

# Orignal values of x and y

plt.scatter(dataset["YearsExperience"],dataset["Salary"])


plt.xlabel("YearsExperience")
plt.ylabel("Salary")
plt.show()

# Plotting the data

plt.scatter(X_train, y_train, color = 'blue')
plt.plot(X_train, LR.predict(X_train), color='red')
plt.title('Salary vs Experienced (Traning set)')
plt.xlabel("YearsExperience")

plt.ylabel("Salary")
plt.show()



# Plotting the data
plt.scatter(X_test, y_test, color = 'blue')
plt.plot(X_train, LR.predict(X_train), color = 'red')
plt.xlabel("Years of Experience")
plt.ylabel("Salary")
plt.show()

from sklearn import metrics
rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred_LR))

rmse

R2 = metrics.r2_score(y_test, y_pred_LR)

R2

########################### Custom input prediction #################################

LR.predict([[4]])

#################################################  Decision Tree  ###################################################



# now i apply decision tree algorithm for check further accuracy.

from sklearn.tree import DecisionTreeRegressor

DT=DecisionTreeRegressor()

DT.fit(X_train,y_train)

y_pred_dt=DT.predict(X_test)

y_pred_dt

y_test

diff_DT=y_test-y_pred_dt

res_dt=pd.concat([pd.Series(y_pred_dt),pd.Series(y_test),pd.Series(diff_DT)],axis=1)
res_dt.columns=['Prediction','Original Data','Diff']

res_dt

X_test

from sklearn import metrics
rmse= np.sqrt(metrics.mean_squared_error(y_test,y_pred_dt))
R2=metrics.r2_score(y_test,y_pred_dt)

rmse

R2

DT.predict([[4]])

from sklearn import tree

text_representation=tree.export_text(DT)
print(text_representation)

fig=plt.figure(figsize=(25,20))
_=tree.plot_tree(DT,feature_names=dataset['YearsExperience'],filled=True)



